This document describes the serial protocols that the robot uses to communicate, both over bluetooth and over the serial link from the arduino to the main board.
Ideally, most packets will be enterable by hand. At the very least, the shell
should be reachable with hand-typed packets.

Escape sequence: since packets are terminated by a specific character, should there be an escape sequence if we want to include that character in messages? We will need to escape it if shows up as the packet length (or maybe the packet type defines that?)

Acknowledgements? Serial links should be pretty reliable; do we really need acknoledgements? NO: just resend data/updates frequently enough; a fast update rate will be just as good and faster than retransmits, and won't waste bandwidth.

Laser scan bandwidth notes:
the scanner outputs 512-float scans at a rate of 10Hz. A float is 4 bytes.
Total bandwidth: 20480 bytes/sec = 163840 bits/sec
This is more bandwidth than is available on the bluetooth link, but not by a
lot. If we cut it down a little, we should be able to deal with it.
Possible values for laser data are realistically in the range from 0-5 meters, 
with an accuracy of about 1cm. If we're willing to lose half of our accuracy, it's easy to represent this in a byte b = d * 50; each increment of b will be 2cm
We will probably need to break laser messages into parts to get proper response times from the system; ie give other processes a chance to communicate more frequently than 10x/sec

GPS data rate: about 480 bytes/second = 3840 bits/sec

General formats:
<ID> <\n>
<ID> <data ... > <checksum> <\n>

checksum: xor of ID and every data byte
packet types are fixed-length for most types; no need to encode packet length

Message types:

Data from Robot:
ID:   Description
S     Sonar data
G     GPS data (not sure if this is raw NMEA or parsed...)
B     Bump sensor data
O     Odometry count readings
O     Speed readings
W     Wheel slip notification?
b     Battery level readings
R     Reflex Settings
H     Hardware sleep/wake status

Data to Robot:
M     Motor Command
S     Steering Command
R     Reflex enable/disable/query
P     Power down (timed)
P     Hardware sleep/wake

Data through:
L     Laser Scanner data through.
C     Commands through

Shell access modes:
Direct shell access mode: bluetooth -> shell
Arduino shell mode; over bluetooth and serial.

shell modes supress all normal protocol parsing and I/O

A few thoughts on reflexes:
Reflexes are generally designed to save the robot from damage or prevent it
from damaging something else. They should be very simple, reactive
percept-to-action mappings that are implemented in firmware, quickly and
without processor intervention. Since sensors can fail, get stuck, or if the
robot is simply in a situation where it expects that reading, it should be
able to disable certain reflexes if necessary.
